package moe.plushie.armourers_workshop.compatibility.core.data;

import moe.plushie.armourers_workshop.api.annotation.Available;
import moe.plushie.armourers_workshop.api.core.IDataSerializer;
import moe.plushie.armourers_workshop.api.core.IDataSerializerKey;
import net.minecraft.nbt.CompoundTag;
import net.minecraft.nbt.NbtOps;

import java.util.Objects;

@Available("[1.16, 1.21)")
public class AbstractDataSerializer implements IDataSerializer {

    private final CompoundTag tag;

    public AbstractDataSerializer(CompoundTag tag, Object registryAccess) {
        this.tag = tag;
    }

    public static AbstractDataSerializer wrap(CompoundTag tag) {
        return new AbstractDataSerializer(tag, null);
    }

    public static AbstractDataSerializer wrap(CompoundTag tag, Object registryAccess) {
        return new AbstractDataSerializer(tag, registryAccess);
    }

    @Override
    public <T> T read(IDataSerializerKey<T> key) {
        var name = key.getName();
        if (tag != null && tag.contains(name)) {
            var codec = key.getCodec().codec();
            var value = codec.decode(NbtOps.INSTANCE, tag.get(key.getName())).get().left();
            if (value.isPresent()) {
                T value2 = value.get().getFirst();
                if (value2 != null) {
                    return value2;
                }
            }
        }
        var constructor = key.getConstructor();
        if (constructor != null) {
            return constructor.get();
        }
        return key.getDefault();
    }

    @Override
    public <T> void write(IDataSerializerKey<T> key, T value) {
        if (tag == null) {
            return;
        }
        var defaultValue = key.getDefault();
        if (defaultValue == value || Objects.equals(defaultValue, value)) {
            return;
        }
        var name = key.getName();
        var codec = key.getCodec().codec();
        codec.encodeStart(NbtOps.INSTANCE, value).get().ifLeft(it -> {
            // we need to merge new value into the item.
            tag.put(name, it);
        });
    }
}
