package moe.plushie.armourers_workshop.compatibility.mixin.patch.attachment;

import com.mojang.blaze3d.vertex.PoseStack;
import moe.plushie.armourers_workshop.api.annotation.Available;
import moe.plushie.armourers_workshop.core.math.OpenTransform3f;
import moe.plushie.armourers_workshop.core.math.Vector3f;
import moe.plushie.armourers_workshop.core.skin.attachment.SkinAttachmentTypes;
import moe.plushie.armourers_workshop.init.client.ClientWardrobeHandler;
import net.minecraft.client.renderer.MultiBufferSource;
import net.minecraft.client.renderer.block.model.ItemTransforms;
import net.minecraft.client.renderer.entity.layers.ItemInHandLayer;
import net.minecraft.world.entity.HumanoidArm;
import net.minecraft.world.entity.LivingEntity;
import net.minecraft.world.item.ItemStack;
import org.spongepowered.asm.mixin.Mixin;
import org.spongepowered.asm.mixin.injection.At;
import org.spongepowered.asm.mixin.injection.Inject;
import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;

@Available("[1.16, 1.20)")
@Mixin(ItemInHandLayer.class)
public class ItemInHandLayerMixin {

    // euler angles xyz(-90, 180, 0) => euler angles zyx(-90, 0, -180)
    // https://www.andre-gaschler.com/rotationconverter/
    private static final OpenTransform3f ALL_HAND_OFFSET = OpenTransform3f.createRotationTransform(new Vector3f(-90, 0, -180));

    @Inject(method = "renderArmWithItem", at = @At(value = "INVOKE", target = "Lcom/mojang/blaze3d/vertex/PoseStack;translate(DDD)V", shift = At.Shift.AFTER))
    private void aw$translateToHand(LivingEntity livingEntity, ItemStack itemStack, ItemTransforms.TransformType itemDisplayContext, HumanoidArm humanoidArm, PoseStack poseStackIn, MultiBufferSource bufferSourceIn, int i, CallbackInfo ci) {
        var attachmentType = switch (itemDisplayContext) {
            case FIRST_PERSON_LEFT_HAND, THIRD_PERSON_LEFT_HAND -> SkinAttachmentTypes.LEFT_HAND;
            case FIRST_PERSON_RIGHT_HAND, THIRD_PERSON_RIGHT_HAND -> SkinAttachmentTypes.RIGHT_HAND;
            default -> SkinAttachmentTypes.UNKNOWN;
        };
        ClientWardrobeHandler.onRenderAttachment(livingEntity, itemStack, attachmentType, poseStackIn, bufferSourceIn, ALL_HAND_OFFSET);
    }
}
