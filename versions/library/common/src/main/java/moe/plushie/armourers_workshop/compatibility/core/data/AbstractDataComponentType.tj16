package moe.plushie.armourers_workshop.compatibility.core.data;

import moe.plushie.armourers_workshop.api.annotation.Available;
import moe.plushie.armourers_workshop.api.core.IDataCodec;
import moe.plushie.armourers_workshop.api.core.IDataComponentType;
import net.minecraft.nbt.NbtOps;
import net.minecraft.world.item.ItemStack;
import org.jetbrains.annotations.Nullable;

@Available("[1.16, 1.21)")
public class AbstractDataComponentType<T> implements IDataComponentType<T> {

    private final String name;
    private final IDataCodec<T> codec;

    public AbstractDataComponentType(String name, IDataCodec<T> codec) {
        this.name = name;
        this.codec = codec;
    }

    public static <T> AbstractDataComponentType<T> create(String name, IDataCodec<T> codec) {
        return new AbstractDataComponentType<>(name, codec);
    }

    public boolean isProxy() {
        return false;
    }

    @Override
    public boolean has(ItemStack itemStack) {
        var tag = itemStack.getTag();
        return tag != null && tag.contains(name);
    }

    @Override
    public void set(ItemStack itemStack, @Nullable T value) {
        if (value != null) {
            var tag = itemStack.getOrCreateTag();
            codec.codec().encodeStart(NbtOps.INSTANCE, value).get().ifLeft(it -> {
                // we need to merge new value into the item.
                tag.put(name, it);
            });
        } else {
            remove(itemStack);
        }
    }

    @Nullable
    @Override
    public T get(ItemStack itemStack) {
        var tag = itemStack.getTag();
        if (tag != null && tag.contains(name)) {
            var value = codec.codec().decode(NbtOps.INSTANCE, tag.get(name)).get().left();
            if (value.isPresent()) {
                return value.get().getFirst();
            }
        }
        return null;
    }

    @Override
    public T getOrDefault(ItemStack itemStack, T defaultValue) {
        T value = get(itemStack);
        if (value != null) {
            return value;
        }
        return defaultValue;
    }

    @Override
    public void remove(ItemStack itemStack) {
        var tag = itemStack.getTag();
        if (tag != null) {
            tag.remove(name);
        }
    }
}
