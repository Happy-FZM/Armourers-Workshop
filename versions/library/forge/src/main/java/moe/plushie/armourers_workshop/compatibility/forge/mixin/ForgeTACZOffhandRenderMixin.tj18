package moe.plushie.armourers_workshop.compatibility.forge.mixin;

import com.mojang.blaze3d.vertex.PoseStack;
import com.tacz.guns.client.renderer.other.HumanoidOffhandRender;
import com.tacz.guns.client.resource.pojo.display.gun.LayerGunShow;
import moe.plushie.armourers_workshop.api.annotation.Available;
import moe.plushie.armourers_workshop.core.math.OpenTransform3f;
import moe.plushie.armourers_workshop.core.math.Vector3f;
import moe.plushie.armourers_workshop.core.skin.attachment.SkinAttachmentTypes;
import moe.plushie.armourers_workshop.init.client.ClientWardrobeHandler;
import net.minecraft.client.renderer.MultiBufferSource;
import net.minecraft.world.entity.LivingEntity;
import net.minecraft.world.item.ItemStack;
import org.spongepowered.asm.mixin.Mixin;
import org.spongepowered.asm.mixin.Pseudo;
import org.spongepowered.asm.mixin.injection.At;
import org.spongepowered.asm.mixin.injection.Inject;
import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;

@Available("[1.18, 1.21)")
@Pseudo
@Mixin(HumanoidOffhandRender.class)
public class ForgeTACZOffhandRenderMixin {

    private static final Vector3f LEFT_WAIST_ORIGIN = new Vector3f(-4, 12, 0);
    private static final Vector3f RIGHT_WAIST_ORIGIN = new Vector3f(4, 12, 0);
    private static final Vector3f BACKPACK_ORIGIN = new Vector3f(0, 24, 2);

    @Inject(method = "renderGunItem", at = @At(value = "INVOKE", target = "Lcom/mojang/blaze3d/vertex/PoseStack;translate(DDD)V", shift = At.Shift.AFTER))
    private static void aw2$translateToPose(LivingEntity entity, PoseStack poseStackIn, MultiBufferSource bufferSourceIn, int packedLight, ItemStack itemStack, LayerGunShow offhandShow, CallbackInfo ci) {
        var attachmentType = SkinAttachmentTypes.BACKPACK;
        var attachmentOrigin = BACKPACK_ORIGIN;

        var pos = offhandShow.getPos();
        if (pos.y() < 16) {
            if (pos.x() < 0) {
                attachmentType = SkinAttachmentTypes.LEFT_WAIST;
                attachmentOrigin = LEFT_WAIST_ORIGIN;
            } else {
                attachmentType = SkinAttachmentTypes.RIGHT_WAIST;
                attachmentOrigin = RIGHT_WAIST_ORIGIN;
            }
        }

        float tx = (pos.x() - attachmentOrigin.getX()) / 16f;
        float ty = (pos.y() - attachmentOrigin.getY()) / 16f;
        float tz = (pos.z() - attachmentOrigin.getZ()) / 16f;

        ClientWardrobeHandler.onRenderAttachment(entity, itemStack, attachmentType, poseStackIn, bufferSourceIn, OpenTransform3f.createTranslateTransform(-tx, -ty, tz));
    }
}
